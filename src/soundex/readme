一、测试驱动开发
    1）写个测试
    2）保定它通过
    3）接着重构设计

二 TDD的三条规则
    1）只在为了使失败测试通过时才编写产品代码
    2）当测试刚好失败时，停止继续编写. 编译失败也是失败
    3）只编写刚好能让一个失败测试通过的产品代码


三 TDD周期
    写一个测试，先确保测试失败
    编码让测试通过
    审阅代码和打磨设计
    确何所有测试依然通过
    

{测试用例名称, 测试的描述性名称}
测试用例(test case): 是一些能共享数据和子程序的测试集合

重构: 是一种代码改写，特点是在保持现有行为不变的前提下改进设计
    重构的时候，不仅要审阅产品代码，还要审阅测试
增量性: 可以避开由一次编写而成的大量且复杂的代码产生的错误

TDD: 在信息不完全的情况下，依然可以向前推进，并且可以得到新信息后级早纠正之前的代码

去掉重复代码的两个好处
    1 提升测试的抽象度
    2 降低未来维护测试的开销

牢记：一旦以牢靠的设计实现了正确的行为后，再考虑是否优化性能，避免过早优化(premature optimization)

一次只做一件事，在写测试时，不要跑去重构，在尝试让测试通过时也不要重构